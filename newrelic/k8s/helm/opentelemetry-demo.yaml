default:
  # List of environment variables applied to all components
  env:
    - name: OTEL_SERVICE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: "metadata.labels['app.kubernetes.io/component']"
    - name: OTEL_POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: OTEL_K8S_CONTAINER_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: "metadata.labels['app.kubernetes.io/component']"
    - name: OTEL_NAMESPACE_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: OTEL_CLUSTER_NAME
      value: opentelemetry-demo
    - name: OTEL_COLLECTOR_NAME
      value: otel-collector
    - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      value: delta
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: >-
        service.name=$(OTEL_SERVICE_NAME),
        service.namespace=opentelemetry-demo,
        service.version={{ .Chart.AppVersion }},
        service.instance.id=$(OTEL_POD_NAME),
        k8s.container.name=$(OTEL_K8S_CONTAINER_NAME),
        k8s.pod.name=$(OTEL_POD_NAME),
        k8s.namespace.name=$(OTEL_NAMESPACE_NAME),
        k8s.cluster.name=$(OTEL_CLUSTER_NAME)

# Disable non-NR components
opensearch:
  enabled: false
grafana:
  enabled: false
prometheus:
  enabled: false
jaeger:
  enabled: false

opentelemetry-collector:
  enabled: true
  extraEnvs:
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: NR_LICENSE_KEY
      valueFrom:
        secretKeyRef:
          name: newrelic-license-key
          key: license-key
    - name: OTEL_CLUSTER_NAME
      value: opentelemetry-demo
  image:
    repository: "otel/opentelemetry-collector-contrib"
  fullnameOverride: otel-collector
  mode: deployment
  presets:
    hostMetrics:
      enabled: true
  resources:
    limits:
      memory: 200Mi
  service:
    type: ClusterIP
  ports:
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
  podAnnotations:
    prometheus.io/scrape: "true"
    opentelemetry_community_demo: "true"
  alternateConfig:
    exporters:
      debug: {}
      otlphttp/newrelic:
        endpoint: https://otlp.nr-data.net:4318
        headers:
          api-key: ${env:NR_LICENSE_KEY}

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133

    processors:
      batch: {}
      cumulativetodelta: {}
      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resource:
        attributes:
        - action: insert
          from_attribute: k8s.pod.name
          key: service.instance.id
      resourcedetection/env:
        detectors:
        - env
        - system
        override: false
        system:
          hostname_sources:
          - os
          resource_attributes:
            host.id:
              enabled: true
      transform:
        error_mode: ignore
        log_statements:
        - context: log
          statements:
          - truncate_all(attributes, 4095)
          - truncate_all(resource.attributes, 4095)
        trace_statements:
        - context: span
          statements:
          - truncate_all(attributes, 4095)
          - truncate_all(resource.attributes, 4095)
        - context: span
          statements:
          - replace_pattern(name, "\\?.*", "")
          - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")

    receivers:
      hostmetrics:
        collection_interval: 10s
        root_path: /hostfs
        scrapers:
          cpu: null
          disk: null
          filesystem:
            exclude_fs_types:
              fs_types:
              - autofs
              - binfmt_misc
              - bpf
              - cgroup2
              - configfs
              - debugfs
              - devpts
              - devtmpfs
              - fusectl
              - hugetlbfs
              - iso9660
              - mqueue
              - nsfs
              - overlay
              - proc
              - procfs
              - pstore
              - rpc_pipefs
              - securityfs
              - selinuxfs
              - squashfs
              - sysfs
              - tracefs
              match_type: strict
            exclude_mount_points:
              match_type: regexp
              mount_points:
              - /dev/*
              - /proc/*
              - /sys/*
              - /run/k3s/containerd/*
              - /var/lib/docker/*
              - /var/lib/kubelet/*
              - /snap/*
          load: null
          memory: null
          network: null
      httpcheck/frontend-proxy:
        targets:
        - endpoint: http://frontend-proxy:8080
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            cors:
              allowed_origins:
              - http://*
              - https://*
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 30s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
      redis:
        collection_interval: 30s
        endpoint: valkey-cart:6379

    service:
      extensions:
      - health_check
      pipelines:
        logs:
          exporters:
          - otlphttp/newrelic
          - debug
          processors:
          - k8sattributes
          - memory_limiter
          - resource
          - transform
          - batch
          receivers:
          - otlp
        metrics:
          exporters:
          - otlphttp/newrelic
          - debug
          processors:
          - memory_limiter
          - resource
          - resourcedetection/env
          - k8sattributes
          - cumulativetodelta
          - batch
          receivers:
          - hostmetrics
          - redis
          - otlp
        traces:
          exporters:
          - otlphttp/newrelic
          - debug
          processors:
          - k8sattributes
          - memory_limiter
          - resource
          - resourcedetection/env
          - transform
          - batch
          receivers:
          - otlp
      telemetry:
        metrics:
          level: "${env:INTERNAL_TELEMETRY_METRICS_LEVEL:-detailed}"
          readers:
            - periodic:
                exporter:
                  otlp:
                    protocol: http/protobuf
                    endpoint: "${env:INTERNAL_TELEMETRY_OTLP_ENDPOINT:-https://otlp.nr-data.net}"
                    headers:
                      - name: api-key
                        value: "${env:NR_LICENSE_KEY}"
        logs:
          level: "${env:INTERNAL_TELEMETRY_LOG_LEVEL:-INFO}"
          # default sampling config for reference to simplify overwrites even if not exposed via env var, e.g. --config=yaml:service::telemetry::logs::sampling::enabled::false
          sampling:
            enabled: true
            # The interval in seconds that the logger applies to each sampling.
            tick: 10s
            # The number of messages logged at the start of each sampling::tick
            initial: 10
            # Sets the sampling policy for subsequent messages after sampling::initial messages are logged. When sampling::thereafter is set to N, every Nth message is logged and all others are dropped. If N is zero, the logger drops all messages after sampling::initial messages are logged.
            thereafter: 100
          processors:
            - batch:
                exporter:
                  otlp:
                    protocol: http/protobuf
                    endpoint: "${env:INTERNAL_TELEMETRY_OTLP_ENDPOINT:-https://otlp.nr-data.net}"
                    headers:
                      - name: api-key
                        value: "${env:NR_LICENSE_KEY}"
        traces:
          level: "${env:INTERNAL_TELEMETRY_TRACE_LEVEL:-basic}"
          sampler:
            parent_based:
              root:
                trace_id_ratio_based:
                  ratio: ${env:INTERNAL_TELEMETRY_TRACE_SAMPLE_RATIO:-0.01}
          processors:
            - batch:
                exporter:
                  otlp:
                    protocol: http/protobuf
                    endpoint: "${env:INTERNAL_TELEMETRY_OTLP_ENDPOINT:-https://otlp.nr-data.net}"
                    headers:
                      - name: api-key
                        value: "${env:NR_LICENSE_KEY}"
        resource:
          newrelic.collector_telemetry.version: 0.3.0
          newrelic.service.type: otel_collector
          service.name: "${env:INTERNAL_TELEMETRY_SERVICE_NAME:-otel-collector}"